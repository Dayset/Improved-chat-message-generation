// Global counter for unique player IDs
var playerCounter = 0;

function make_message(e) {
    var t;
    var i = "";
  if ("MESSAGE" == e.type || "TIPS" == e.type || is_album_message_type(e.type)) { 
      // Replace smileys with images
        e.text = e.text.replace(new RegExp("<([1-9]|[1-2][0-9]|3[0-5])>", "g"),
            "<img border=0 width=30px src='https://github.com/Dayset/Improved-chat-message-generation/raw/main/smileys/$1.gif'>");
        e.text = e.text.replace(new RegExp("<(\\d+)>", "g"), "<img border=0 src=/img/smiles/smile$1.gif>");
        e.text = e.text.replace(new RegExp("летняяяя", "g"), "СОБАКА СУТУЛАЯ");

        var s = "color:#" + e.color + "; font-weight:bold;";
        var r = "color:#" + e.color + ";";
        var a = e.time.substr(11, 8);
        var isYoutubeRendered = false; // Limit to one YouTube player per message
        var ttsText = ""; // Cleaned text for TTS

        if (0 == e.is_private) {
            i = "<span class='" + (e.user_sex == "f" ? "time_girl" : "time_boy") + "'>(" + a + ")</span>";
            if (0 < e.user_id) {
                i += make_dropdown_menu_to_user(e, false);
                i += "<a style='" + s + ";text-decoration:underline;' href='javascript:writeName(\"" +
                        e.user_nick.replace(/"/g, '\\"') + "\")'>" + e.user_nick + "</a>";
            }
            i += "<span style='" + r + "'>: ";

            const words = e.text.split(" ");
            words.forEach(word => {
                if (!isYoutubeRendered) {
                    let youtubeVideoID = null;
                    const youtubeRegex = /^[a-zA-Z0-9_-]{11}$/;

                    // Extract video ID from youtube.com/watch?v=
                    const matchV = word.match(/v=([a-zA-Z0-9_-]{11})/);
                    if (matchV) {
                        youtubeVideoID = matchV[1];
                    } else {
                        // Extract video ID from youtu.be/
                        const matchBe = word.match(/youtu\.be\/([a-zA-Z0-9_-]{11})/);
                        if (matchBe) {
                            youtubeVideoID = matchBe[1];
                        } else if (youtubeRegex.test(word)) {
                            youtubeVideoID = word;
                        }
                    }

                    if (youtubeVideoID) {
                        playerCounter++;
                        var uniqueID = 'player-' + playerCounter;
                        i += '<div id="' + uniqueID + '" style="width: 640px; height: 240px;"></div>';
                        i += '<script>renderYouTubePlayer("' + uniqueID + '", "' + youtubeVideoID + '")</script>';
                        isYoutubeRendered = true;
                    } else {
                        ttsText += word + " ";
                        i += word + " ";
                    }
                } else {
                    ttsText += word + " ";
                    i += word + " ";
                }
            });
            i += "</span>";
            speakMessage(ttsText.trim(), false);
        } else {
            i = "<span class='" + (e.user_sex == "f" ? "time_girl" : "time_boy") + "'>(" + a + ")</span>";
            if (0 < e.user_id) {
                i += make_dropdown_menu_to_user(e, true);
                a = escapeQuot(escape_user_nick(e.user_nick));
                i += "<a style='" + s + ";text-decoration:underline;' href='javascript:header_send_private(" +
                     e.user_id + ', "' + a + "\")'>" + e.user_nick + "</a>";
                i += "<span style='" + r + "'>: ";

                const words = e.text.split(" ");
                words.forEach(word => {
                    if (!isYoutubeRendered) {
                        let youtubeVideoID = null;
                        const youtubeRegex = /^[a-zA-Z0-9_-]{11}$/;
                        const matchV = word.match(/v=([a-zA-Z0-9_-]{11})/);
                        if (matchV) {
                            youtubeVideoID = matchV[1];
                        } else {
                            const matchBe = word.match(/youtu\.be\/([a-zA-Z0-9_-]{11})/);
                            if (matchBe) {
                                youtubeVideoID = matchBe[1];
                            } else if (youtubeRegex.test(word)) {
                                youtubeVideoID = word;
                            }
                        }

                        if (youtubeVideoID) {
                            playerCounter++;
                            var uniqueID = 'player-' + playerCounter;
                            i += '<div id="' + uniqueID + '" style="width: 640px; height: 240px;"></div>';
                            i += '<script>renderYouTubePlayer("' + uniqueID + '", "' + youtubeVideoID + '")</script>';
                            isYoutubeRendered = true;
                        } else {
                            ttsText += word + " ";
                            i += word + " ";
                        }
                    } else {
                        ttsText += word + " ";
                        i += word + " ";
                    }
                });
                i += "</span>";
            }
            speakMessage(ttsText.trim(), true, e.user_nick, e.to_user_nick);
        }
    }
    if ("READY" == e.type) {
        i = e.text;
    }
    return i;
}

function renderYouTubePlayer(divID, videoID) {
    if (typeof YT === 'undefined' || typeof YT.Player === 'undefined') {
        if (!document.getElementById('youtube-api')) {
            const tag = document.createElement('script');
            tag.id = 'youtube-api';
            tag.src = "https://www.youtube.com/iframe_api";
            const firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
            window.onYouTubeIframeAPIReady = function() {
                createYouTubePlayer(divID, videoID);
            };
        } else {
            const checkYT = setInterval(function() {
                if (typeof YT !== 'undefined' && typeof YT.Player !== 'undefined') {
                    clearInterval(checkYT);
                    createYouTubePlayer(divID, videoID);
                }
            }, 100);
        }
    } else {
        createYouTubePlayer(divID, videoID);
    }
}

function createYouTubePlayer(divID, videoID) {
    new YT.Player(divID, {
        videoId: videoID,
        height: '240',
        width: '640',
        playerVars: {
            'playsinline': 1,
            'controls': 1,
            'autoplay': 0,
            'rel': 0
        },
        events: {
            'onReady': function(event) {
                event.target.setPlaybackQuality('small');
            }
        }
    });
}

// Assuming speakMessage remains unchanged

/**
 * Text-to-Speech function.
 * It removes any HTML (links, images, iframes, etc.) from the provided message,
 * then speaks it. For private messages, a prefix of "> sender to receiver" is added;
 * additionally, if the message ends with a question mark, a language-specific note is appended.
 */
function speakMessage(message, isPrivate, sender, receiver) {
    let ttsText = message.replace(/<a[^>]*>(.*?)<\/a>/gi, '$1')
                         .replace(/<img[^>]*>/gi, '')
                         .replace(/<iframe[^>]*>[\s\S]*?<\/iframe>/gi, '')
                         .replace(/<\/?[^>]+(>|$)/g, "");

    let isRussian = /[а-яёА-ЯЁ]/.test(ttsText);

    if (isPrivate && sender && receiver) {
        ttsText = `>${sender} пишет в личку` + ttsText;
    }
//${receiver} 
    if (ttsText.trim().endsWith('?')) {
        ttsText += isRussian ? " Это Вопрос" : " This Is A Question mark";
    }

    if ('speechSynthesis' in window) {
        let utterance = new SpeechSynthesisUtterance(ttsText);
        utterance.lang = isRussian ? 'ru-RU' : 'en-US';
        utterance.rate = 1.75;
        utterance.pitch = 0.5;
        speechSynthesis.speak(utterance);
    } else {
        console.warn("Text-to-Speech is not supported in this browser.");
    }
}
